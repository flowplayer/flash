<project name="Flowplayer plugin base build file (included in the actual plugin specific build.xml files)">
    <property file="build.generated.properties"/>

	<import file="remotecopy.xml" />
	<property file="${user.home}/plugin.properties" />
	<property file="plugin-build.properties" />
	<property name="src" value="src" />
	<property name="src-as" value="${src}/actionscript" />
	<property name="src-js" value="${src}/javascript" />
	<property name="build-dir" value="build" />
	<property name="example-dir" value="example" />
	<property name="dist-dir" value="dist" />
	<property name="lib-dir" value="lib" />
	<property name="flex-libs-path" value="${flexlibsdir}" />
	<property name="flowplayer-js-version-info" value="3.1.4" />
	<property name="src-flowplayer" value="../../core" />
    <property name="plugin-swc" value="${basename}.swc" />
    <property name="plugin-swc-versioned" value="${basename}-${version}.swc" />

	<condition property="extra.libs" value="${plugin-libs}" else="">
        <isset property="plugin-libs" />
    </condition>

	<macrodef name="build-plugin">
		<attribute name="plugin-main-class" />
		<attribute name="plugin-binary" />
		<sequential>
			<echo message="++ @{plugin-binary} +++">
			</echo>

			<antcall target="prepare" />
			<antcall target="compile">
				<param name="plugin-binary" value="@{plugin-binary}" />
				<param name="plugin-main-class" value="@{plugin-main-class}" />
			</antcall>
		</sequential>
	</macrodef>

	<target name="clean">
		<echo message="cleaning ${basename}" />
		<delete>
			<fileset dir="${build-dir}">
				<include name="*swf" />
				<include name="*swc" />
			</fileset>
		</delete>
	</target>

	<macrodef name="mxmlc.compile">
		<attribute name="src" default="${src-as}" />
		<attribute name="plugin-main-class" default="${plugin-main-class}" />
		<attribute name="out" default="${plugin-binary}" />
		<attribute name="libs" default="" />

		<sequential>
			<condition property="libs" value="" else="-include-libraries @{libs}">
				<equals arg1="@{libs}" arg2="" />
			</condition>
			<condition property="pluginruntimelibs1" value="-runtime-shared-library-path+=${plugin-runtime-lib-swc1},library.swf" else="">
						<isset property="plugin-runtime-lib-swc1" />
			</condition>
			<condition property="pluginruntimelibs2" value="-runtime-shared-library-path+=${plugin-runtime-lib-swc2},library.swf" else="">
				<isset property="plugin-runtime-lib-swc2" />
			</condition>
			<condition property="pluginruntimelibs3" value="-runtime-shared-library-path+=${plugin-runtime-lib-swc3},library.swf" else="">
				<isset property="plugin-runtime-lib-swc3" />
			</condition>
            <condition property="mxmlc-library-path" value="${library-path}" else="">
                <isset property="library-path" />
            </condition>
            <condition property="mxmlc-define" value="-define=${compiler-define}" else="">
                <isset property="compiler-define" />
            </condition>
			<condition property="mxmlc-defines" value="${compiler-defines}" else="">
                <isset property="compiler-defines" />
            </condition>
            <condition property="mxmlc-sources" value="${extra-sources}" else="">
                <isset property="extra-sources" />
            </condition>

            <echo message="compiling with  ${mxmlc-library-path}" />
            <echo message="compiling with  ${mxmlc-define} ${mxmlc-defines}" />

			<exec executable="${mxmlc_bin}" failonerror="true">
				<arg line="-source-path @{src} ${mxmlc-library-path} ${mxmlc-sources}" />
                <arg line="${mxmlc-define}" />
				<arg line="${mxmlc-defines}" />
				<arg line="${libs}" />
				<arg line="-library-path ${flex-libs-path} ${mxmlc-library-path}" />
				<arg line="-runtime-shared-library-path=${flowplayer_lib},library.swf" />
				<arg line="${pluginruntimelibs1}" />
				<arg line="${pluginruntimelibs2}" />
				<arg line="${pluginruntimelibs3}" />
				<arg line="-default-frame-rate=${framerate}" />
				<arg line="-default-background-color=${bgcolor}" />
                <arg line="-strict=true" />
				<arg line="-keep-as3-metadata=Value,External" />
				<arg line="'${src-as}/@{plugin-main-class}'" />
				<arg line="-output '${build-dir}/@{out}'" />
                <arg line="-incremental=false"/>
			</exec>
		</sequential>
	</macrodef>
	
	<macrodef name="compc.compile">
            <attribute name="src" default="${src-as}" />
            <attribute name="sources" default="." />
            <attribute name="out" default="${plugin-binary}" />
            <attribute name="libs" default="" />

            <sequential>
            				<condition property="libs" value="" else="-include-libraries @{libs}">
            					<equals arg1="@{libs}" arg2="" />
            				</condition>
            				<condition property="pluginruntimelibs1" value="-runtime-shared-library-path+=${plugin-runtime-lib-swc1},library.swf" else="">
            							<isset property="plugin-runtime-lib-swc1" />
            				</condition>
            				<condition property="pluginruntimelibs2" value="-runtime-shared-library-path+=${plugin-runtime-lib-swc2},library.swf" else="">
            					<isset property="plugin-runtime-lib-swc2" />
            				</condition>
            				<condition property="pluginruntimelibs3" value="-runtime-shared-library-path+=${plugin-runtime-lib-swc3},library.swf" else="">
            					<isset property="plugin-runtime-lib-swc3" />
            				</condition>
            	            <condition property="compc-library-path" value="${library-path}" else="">
            	                <isset property="library-path" />
            	            </condition>
            	            <condition property="compc-define" value="-define=${compiler-define}" else="">
            	                <isset property="compiler-define" />
            	            </condition>
            	            <condition property="compc-sources" value="${extra-sources}" else="">
            	                <isset property="extra-sources" />
            	            </condition>
							
							<condition property="compc-defines" value="${compiler-defines}" else="">
				                <isset property="compiler-defines" />
				            </condition>

            	            <echo message="compiling lbrary with  ${compc-library-path}" />
            	            <echo message="compiling with  ${compc-define}" />
            		
                   
                    <exec executable="${compc_bin}" failonerror="true">
                            <arg line="-source-path @{src} ${compc-sources}" />
                            <arg line="${libs}" />
                    		<arg line="${compc-define}" />
							<arg line="${compc-defines}" />
                            <arg line="-library-path ${flexdir}/frameworks/locale/en_US ${flex-libs-path} ${flowplayer_lib} ${compc-library-path}" />
                            <arg line="-include-sources @{src}" />
            
                            <arg line="-strict=true" />
                            <arg line="-keep-as3-metadata=External" />
                            <arg line="-output '${build-dir}/@{out}'" />
                    </exec>
            </sequential>
    </macrodef>

	<macrodef name="prepare-example">
		<attribute name="player-swf" />
		<attribute name="main-swf" />
		<sequential>
			<copy todir="${build-dir}/example" overwrite="true">
				<fileset dir="example">
					<include name="*.tmpl" />
				</fileset>
				<mapper type="glob" from="*.tmpl" to="*" />
				<filterset begintoken="@" endtoken="@">
					<filter token="FLOWPLAYER_JS_VERSION_INFO" value="${flowplayer-js-version-info}" />
					<filter token="PLAYER_SWF" value="../@{player-swf}" />
					<filter token="MAIN_PLAYER_SWF" value="../@{main-swf}" />
				</filterset>
			</copy>

			<copy todir="${build-dir}/example">
				<fileset dir="example">
					<exclude name="*.tmpl"/>
					
					<include name="*.js" />
					<include name="*.html" />
					<include name="*.css" />
					<include name="*.png" />
					<include name="*.jpg" />
					<include name="*.swf" />
					<include name="*.txt" />
					<include name="**/css/*" />
					<include name="**/images/*" />
				</fileset>
			</copy>
            <copy todir="${build-dir}">
                <fileset dir="${src-flowplayer}/build">
                    <include name="*.swf" />
                </fileset>
            </copy>
            <echo message="copying js files to build/example" />
            <copy todir="${build-dir}/example" overwrite="true">
                <fileset dir="${src-flowplayer}/build">
                    <include name="*.js" />
                </fileset>
            </copy>
		</sequential>
	</macrodef>
	
	<target name="library" depends="build" description="builds the plugin lib">
		<compc.compile src="${src-as}" libs="${extra.libs}" sources="." out="${plugin-swc}" />
		<copy file="${build-dir}/${plugin-swc}" tofile="${build-dir}/${plugin-swc-versioned}">
        </copy>
	</target>

	<target name="compile" unless="pluginproxy">
		<mxmlc.compile src="${src-as}" libs="${extra.libs}" out="${plugin-binary}" plugin-main-class="${plugin-main-class}" />
		<!--<antcall target="example" />-->
	</target>

	<target name="example" depends="build" description="prepare the plugin example html files">
		<prepare-example player-swf="flowplayer.swf" main-swf="${plugin-binary-versioned}"/>
	</target>
	
	<target name="build" description="builds all" unless="pluginproxy">
		<build-plugin plugin-binary="${plugin-binary}" plugin-main-class="${plugin-main-class}" />
        <copy file="${build-dir}/${plugin-binary}" tofile="${build-dir}/${plugin-binary-versioned}" />
	</target>

	<target name="deploy" description="Deploys the plugin into the target dir" depends="build" unless="pluginproxy">
		<available file="${deploy_dir}" property="deploy.dir.exists" />
		<antcall target="_deploy" />
	</target>

	<target name="_deploy" if="deploy.dir.exists">
		<echo message="deploying plugin to ${deploy_dir}" />
		<copy file="${build-dir}/${plugin-binary}" todir="${deploy_dir}/${build-dir}" overwrite="true" />
		<copy file="${build-dir}/${plugin-binary-versioned}" todir="${deploy_dir}/${build-dir}" overwrite="true" />
        <copy file="${build-dir}/${plugin-binary-versioned}" todir="${deploy_dir}/${dist-dir}" overwrite="true" />

        <!--<copy file="${build-dir}/${plugin-binary}" tofile="${deploy_dir}/${build-dir}/${basename}-dev.swf" overwrite="true" />-->
	</target>


	<target name="dist" description="Copies the distributaion packages into a target dir" depends="zip, source-zip" unless="pluginproxy">
		<echo message="Copying dist zip to ${deploy-dir}" />
		<copy file="${dist-dir}/${basename}-${version}.zip" todir="${deploy_dir}/${dist-dir}" overwrite="true" />
		<copy file="${dist-dir}/${basename}-${version}-src.zip" todir="${deploy_dir}/${dist-dir}" overwrite="true" />

        <delete dir="${dist-dir}/${basename}"/>
        <unzip src="${dist-dir}/${basename}-${version}.zip" dest="${dist-dir}" />

        <echo message="Copying swfs to ${deploy-dir}" />
        <copy file="${dist-dir}/${basename}/${plugin-binary-versioned}" todir="${deploy_dir}/${dist-dir}" overwrite="true" failonerror="false" verbose="true" />
        <copy file="${dist-dir}/${basename}/${plugin-binary-versioned}" todir="${deploy_dir}/build" overwrite="true"  failonerror="false" verbose="true" />
    </target>


	<target name="prepare" unless="pluginproxy">
		<mkdir dir="${example-dir}" />
		<mkdir dir="${build-dir}" />
		<mkdir dir="${dist-dir}" />
		<copy file="${flowplayer_lib}" todir="${build-dir}" />

		<unzip dest="${build-dir}">
			<fileset file="${flowplayer_lib}" />
		</unzip>
	</target>

	<target name="zip" unless="pluginproxy">
		<zip destfile="${dist-dir}/${basename}-${version}.zip">
			<zipfileset prefix="${basename}" dir=".">
				<include name="LICENSE.txt" />
				<include name="README.txt" />
			</zipfileset>
			<zipfileset prefix="${basename}" dir="${build-dir}">
				<include name="${plugin-binary-versioned}" />
			</zipfileset>
		</zip>
        <echo message="copying to ${dist-dir}/${basename}.zip" />
        <copy file="${dist-dir}/${basename}-${version}.zip" tofile="${dist-dir}/${basename}.zip" overwrite="true" />
        <copy file="${dist-dir}/${basename}-${version}.zip" tofile="${dist-dir}/${basename}-${version}-${flash.target.player}.zip" overwrite="true" />
	</target>
	
	<target name="zip-swc">
        <zip destfile="${dist-dir}/${basename}-${version}.swc.zip">
            <zipfileset prefix="${basename}" dir=".">
                <include name="LICENSE.txt" />
                <include name="README-swc.txt" />
            </zipfileset>
            <zipfileset prefix="${basename}" dir="${build-dir}">
                <include name="${plugin-swc-versioned}" />
            </zipfileset>
        </zip>
    </target>
	
	<target name="zip-with-examples">
		<zip destfile="${dist-dir}/${basename}-${version}.zip">
			<zipfileset prefix="${basename}" dir=".">
				<include name="LICENSE.txt" />
				<include name="README.txt" />
			</zipfileset>
			<zipfileset prefix="${basename}" dir="${build-dir}">
				<include name="${plugin-binary-versioned}" />
				<include name="flowplayer.swf" />
				<include name="flowplayer.controls.swf" />
				<include name="example/*" />
			</zipfileset>
		</zip>
	</target>
	
    
    <target name="write-zip-url">
        <echo file="${url-file}" append="true">&#60;a href="http://flowplayer-releases.s3.amazonaws.com/${basename}/${basename}.zip"&#62;${basename}.zip&#60;/a&#62; &#60;br /&#62;
    </echo>
    </target>

    <target name="write-version">
        <echo file="${yaml-file}" append="true">        ${shortname}: ${version}${line.separator}</echo>
    </target>

    <target name="write-filesize">
        <length property="filesize" file="${build-dir}/${plugin-binary}" />
        <echo file="${yaml-file}" append="true" message="        ${plugin-binary}: ${filesize}${line.separator}" />
        <length property="zip.filesize" file="${dist-dir}/${basename}-${version}.zip" />
        <echo file="${yaml-file}" append="true" message="        ${basename}.zip: ${zip.filesize}${line.separator}" />
    </target>

	<target name="source-zip" depends="prepare" unless="pluginproxy">
		<zip destfile="${dist-dir}/${basename}-${version}-src.zip">
			<zipfileset prefix="${basename}" dir=".">
				<include name="LICENSE.txt" />
				<include name="README.txt" />
				<include name="build.xml" />
				<include name="build.properties" />
			</zipfileset>
            <zipfileset prefix="${basename}/${src}" dir="${src}">
                <include name="**/*" />
            </zipfileset>
            <zipfileset prefix="${basename}/example" dir="example">
                <include name="**/*" />
            </zipfileset>
		</zip>
        <copy file="${dist-dir}/${basename}-${version}-src.zip" tofile="${dist-dir}/${basename}-src.zip" />
	</target>

    <target name="release-remote">
        <echo message="release-remote: releasing to ${releasedir}" />

        <delete dir="${dist-dir}/${basename}"/>
        <unzip src="${dist-dir}/${basename}-${version}.zip" dest="${dist-dir}" />

        <remotecopy bucketname="flowplayer-releases/${releasedir}" keyfile="${keyfile}" pass="${pass}">
            <releasefiles>
                <fileset dir="${dist-dir}">
                    <include name="${basename}-${version}.zip" />
                    <include name="${basename}-${version}-src.zip" />
                    <include name="${plugin-binary-versioned}" />
                </fileset>
                <fileset dir="${dist-dir}/${basename}">
                    <include name="${plugin-binary-versioned}" />
                </fileset>
            </releasefiles>
        </remotecopy>

        <echo message="release-remote: uploading to swf" />
        <remotecopy bucketname="flowplayer-releases/swf" keyfile="${keyfile}" pass="${pass}">
            <releasefiles>
                <fileset dir="${dist-dir}/${basename}">
                    <include name="*.swf" />
                </fileset>
            </releasefiles>
        </remotecopy>
    </target>

    <target name="upload-dev-version" depends="upload-dev-swfs">
        <echo message="release-remote: releasing to ${releasedir}" />
        <remotecopy bucketname="flowplayer-releases/${releasedir}" keyfile="${keyfile}" pass="${pass}">
            <releasefiles>
                <fileset dir="${dist-dir}">
                    <include name="${basename}.zip" />
                    <include name="${basename}-src.zip" />
                    <include name="${basename}.swf" />
                </fileset>
                <fileset dir="${build-dir}">
                    <include name="${basename}.swf" />
                </fileset>
            </releasefiles>
        </remotecopy>
    </target>

    <target name="release-remote-dev">
        <remotecopy-dev remotedir="${swfremotedir}" keyfile="${keyfile}" pass="${pass}">
            <releasefiles>
                <fileset dir="${build-dir}">
                    <include name="${plugin-binary-versioned}" />
                    <include name="${plugin-binary}" />
                </fileset>
            </releasefiles>
        </remotecopy-dev>
    </target>

    <target name="upload-dev-swfs">
        <remotecopy bucketname="flowplayer-releases/swf" keyfile="${keyfile}" pass="${pass}">
            <releasefiles>
                <fileset dir="${build-dir}">
                    <include name="${basename}.swf" />
                </fileset>
            </releasefiles>
        </remotecopy>
    </target>

	<target name="echo-name">
		<echo message="${plugin-binary-versioned}" />
	</target>

    <target name="zip-swfs">
        <updatezip zip="${all-swf-zip}">
            <zipfiles>
                <fileset dir="${build-dir}">
                    <include name="${basename}.swf" />
                </fileset>
            </zipfiles>
        </updatezip>
    </target>
</project>